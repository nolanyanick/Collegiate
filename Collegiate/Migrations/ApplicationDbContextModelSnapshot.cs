// <auto-generated />
using System;
using Collegiate.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Collegiate.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Collegiate.Models.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PickupLocationDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = "0343fbc8-a866-4e7e-aaf6-b095f12a70ce",
                            Address1 = "2899 Lafrainer Rd.",
                            City = "Traverse City",
                            LocationName = "Grandma's House",
                            PickupLocationDescription = "I'll be at kings Court Right outside the sign on Lafranier",
                            Type = "Residence",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49686"
                        },
                        new
                        {
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            Address1 = "8917 E 34 Rd",
                            City = "Cadilliac",
                            LocationName = "Walmart",
                            PickupLocationDescription = "It's the only walmart in Cadilliac I'll be at the main enterance",
                            Type = "MeetingPlace",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49601"
                        },
                        new
                        {
                            AddressId = "2abc4f72-8a6c-4419-ac65-465b229ae5a4",
                            Address1 = "809 North Cedar St",
                            City = "Kalkaska",
                            LocationName = "Shell",
                            PickupLocationDescription = "I'll be at the main enterance",
                            Type = "MeetingPlace",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49646"
                        },
                        new
                        {
                            AddressId = "96308717-4d4c-46ed-8e58-51412d5d9645",
                            Address1 = "9812 Honor Hwy",
                            City = "Honor",
                            LocationName = "Cherry Bowl",
                            PickupLocationDescription = "I'll be at the main enterance",
                            Type = "MeetingPlace",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49640"
                        },
                        new
                        {
                            AddressId = "7070fb2e-76b3-4e1c-808e-836fd5668cbe",
                            Address1 = "205 Madison Ave",
                            Address2 = "Apt 209",
                            City = "Kingsley",
                            LocationName = "My Place",
                            PickupLocationDescription = "I'll be at the main enterance",
                            Type = "Residence",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49640"
                        },
                        new
                        {
                            AddressId = "00000000-0000-0000-0000-000000000000",
                            Address1 = "1701 East Front St",
                            City = "Traverse City",
                            LocationName = "NMC",
                            PickupLocationDescription = "You choose Location",
                            Type = "Campus",
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            Zip = "49686"
                        });
                });

            modelBuilder.Entity("Collegiate.Models.Driver", b =>
                {
                    b.Property<string>("DriverId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double>("DriverRating")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("VehicleId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("DriverId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            DriverRating = 4.0,
                            UserId = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            VehicleId = "303a164e-2159-40fd-bfbd-88b3f9dd2c4a"
                        },
                        new
                        {
                            DriverId = "81acb598-9150-4b45-881d-58164979c82a",
                            DriverRating = 4.0,
                            UserId = "B8C63411-A600-B238-E734-E0F4FDD505F0",
                            VehicleId = "95affda5-e695-4937-8053-aea3b71f541f"
                        },
                        new
                        {
                            DriverId = "fa1fa970-e30d-4116-8ba9-8f7a88d27b97",
                            DriverRating = 4.0,
                            UserId = "DDD1ADD9-5AD9-33FC-FB9B-C901B27D232A",
                            VehicleId = "486114be-6706-4122-ad40-e812bcc459d7"
                        },
                        new
                        {
                            DriverId = "9769de71-8f92-4c31-acb6-1e754c2076e4",
                            DriverRating = 4.0,
                            UserId = "55D5ADBB-50F6-E6BF-905F-2D72E4105231",
                            VehicleId = "1717adf7-6a34-4907-baa0-23d211262892"
                        },
                        new
                        {
                            DriverId = "c2ebd11f-0e4b-412f-82d4-e57f86e554b6",
                            DriverRating = 4.0,
                            UserId = "4B941445-7EA2-BB82-5913-D87BE1CB1768",
                            VehicleId = "cddb3123-00dd-4872-81ab-ce620ae20fde"
                        });
                });

            modelBuilder.Entity("Collegiate.Models.DriverOffer", b =>
                {
                    b.Property<string>("DriverOfferId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Campus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DriverId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("FromMeetLocationDesc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("OfferClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ReturnTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SeatsAvailable")
                        .HasColumnType("int");

                    b.Property<string>("ToMeetLocationDesc")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ToNMC")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("DriverOfferId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.ToTable("DriverOffers");

                    b.HasData(
                        new
                        {
                            DriverOfferId = "3bf8d706-472e-4497-b4e6-111fb4ebf24c",
                            ArrivalTime = new DateTime(2020, 4, 15, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the Library Parking Lot",
                            ToNMC = true
                        },
                        new
                        {
                            DriverOfferId = "b17c6728-1008-4ebb-b39c-57a41f490b24",
                            AddressId = "0343fbc8-a866-4e7e-aaf6-b095f12a70ce",
                            ArrivalTime = new DateTime(2020, 4, 15, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2020, 4, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            FromMeetLocationDesc = "I plan on picking people up at the Library Parking Lot",
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToNMC = false
                        },
                        new
                        {
                            DriverOfferId = "30836417-2d86-4fe2-b8b3-cbc964d8f46b",
                            ArrivalTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Aero Park",
                            DepartureTime = new DateTime(2020, 4, 16, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at main building enterance",
                            ToNMC = true
                        },
                        new
                        {
                            DriverOfferId = "4661cc56-b9cf-4704-9553-894aae98436a",
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            ArrivalTime = new DateTime(2020, 4, 16, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the back of the parking lot at Walmart",
                            ToNMC = false
                        },
                        new
                        {
                            DriverOfferId = "6357d0f6-463a-44ba-887b-0648b6ba33dc",
                            ArrivalTime = new DateTime(2020, 4, 17, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 17, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the Library Parking Lot",
                            ToNMC = true
                        },
                        new
                        {
                            DriverOfferId = "a87df131-18b8-4762-9d24-dc6e679458ba",
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            ArrivalTime = new DateTime(2020, 4, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the back of the parking lot at Walmart",
                            ToNMC = false
                        },
                        new
                        {
                            DriverOfferId = "adf3fbad-0ed9-4a9d-880b-1e8b2271bcdb",
                            ArrivalTime = new DateTime(2020, 4, 22, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 22, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 22, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the Library Parking Lot",
                            ToNMC = true
                        },
                        new
                        {
                            DriverOfferId = "c4436384-9cd1-453c-8880-30e1de5c71aa",
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            ArrivalTime = new DateTime(2020, 4, 22, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 22, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the back of the parking lot at Walmart",
                            ToNMC = false
                        },
                        new
                        {
                            DriverOfferId = "26d39cb7-4b4d-4e99-860f-1465277e3adc",
                            ArrivalTime = new DateTime(2020, 4, 23, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 23, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 23, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the Library Parking Lot",
                            ToNMC = true
                        },
                        new
                        {
                            DriverOfferId = "1d0dfb0d-efdc-48eb-bc77-2c5b8520e5b0",
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            ArrivalTime = new DateTime(2020, 4, 23, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main Campus",
                            DepartureTime = new DateTime(2020, 4, 23, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            DriverId = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SeatsAvailable = 3,
                            ToMeetLocationDesc = "I plan on dropping everybody off at the back of the parking lot at Walmart",
                            ToNMC = false
                        });
                });

            modelBuilder.Entity("Collegiate.Models.RiderRequest", b =>
                {
                    b.Property<string>("RiderRequestId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("AddressId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Campus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("OfferClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ReturnTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RiderComments")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ToNMC")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("RiderRequestId");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("RiderRequests");

                    b.HasData(
                        new
                        {
                            RiderRequestId = "05378CE6-F765-4FC7-9F95-3B6E47633CFA",
                            AddressId = "00000000-0000-0000-0000-000000000000",
                            ArrivalTime = new DateTime(2020, 4, 15, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main",
                            DepartureTime = new DateTime(2020, 4, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            ToNMC = true,
                            UserId = "B8C63411-A600-B238-E734-E0F4FDD505F0"
                        },
                        new
                        {
                            RiderRequestId = "F87EB0B8-F687-41FB-8973-D5211B01ACD3",
                            AddressId = "0343fbc8-a866-4e7e-aaf6-b095f12a70ce",
                            ArrivalTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2020, 4, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToNMC = false,
                            UserId = "B8C63411-A600-B238-E734-E0F4FDD505F0"
                        },
                        new
                        {
                            RiderRequestId = "5253DA99-5E44-44C8-ADDE-86FD48731810",
                            AddressId = "00000000-0000-0000-0000-000000000000",
                            ArrivalTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            Campus = "Main",
                            DepartureTime = new DateTime(2020, 4, 16, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            OfferClosed = false,
                            ReturnTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            ToNMC = true,
                            UserId = "B8C63411-A600-B238-E734-E0F4FDD505F0"
                        },
                        new
                        {
                            RiderRequestId = "097E9CF0-793B-48E0-B851-D2DDB882ABB3",
                            AddressId = "5d56bd1d-8bf7-4c2c-8b55-984186650386",
                            ArrivalTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2020, 4, 16, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            OfferClosed = false,
                            ReturnTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToNMC = false,
                            UserId = "B8C63411-A600-B238-E734-E0F4FDD505F0"
                        });
                });

            modelBuilder.Entity("Collegiate.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "BFF12317-DB43-B3AC-7AA4-3A8DB536ED64",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9c1044e-23e2-492e-a0f0-01d68a021172",
                            ContactEmail = "a.aliquet@anteiaculis.net",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eget.ipsum.Donec@nondui.co.uk",
                            EmailConfirmed = false,
                            FirstName = "Aquila",
                            LastName = "Carroll",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-520-8702",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c089565-5109-40b6-b250-b144060f6675",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 123, DateTimeKind.Local).AddTicks(7355),
                            UserName = "interdum.libero.dui@acurnaUt.net"
                        },
                        new
                        {
                            Id = "B8C63411-A600-B238-E734-E0F4FDD505F0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d1a2bd2-a8a9-4be6-a520-db65ea861588",
                            ContactEmail = "a.neque@Suspendissealiquetmolestie.edu",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "risus.odio.auctor@non.edu",
                            EmailConfirmed = false,
                            FirstName = "Garrison",
                            LastName = "Baldwin",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-811-9180",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aab2ee67-0ae0-4f66-bcff-119075441601",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5746),
                            UserName = "ac.mattis@malesuadafamesac.com"
                        },
                        new
                        {
                            Id = "DDD1ADD9-5AD9-33FC-FB9B-C901B27D232A",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "650a4c3f-e9ea-4e21-bfe2-ff981e39be1a",
                            ContactEmail = "conubia.nostra@diamPellentesquehabitant.org",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Quisque.porttitor@convallisantelectus.com",
                            EmailConfirmed = false,
                            FirstName = "Arden",
                            LastName = "Landry",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-502-5970",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4533877-3735-4828-8426-1e8458334ff6",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5858),
                            UserName = "iaculis@sapienmolestieorci.org"
                        },
                        new
                        {
                            Id = "55D5ADBB-50F6-E6BF-905F-2D72E4105231",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bea1ed4f-040a-480a-9c18-11e768a0c4de",
                            ContactEmail = "dolor@nec.co.uk",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "netus.et@porttitortellus.edu",
                            EmailConfirmed = false,
                            FirstName = "Brady",
                            LastName = "Livingston",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-153-4083",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d825967-481a-4790-b910-1527974f7fd4",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5885),
                            UserName = "laoreet@massa.net"
                        },
                        new
                        {
                            Id = "4B941445-7EA2-BB82-5913-D87BE1CB1768",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dcef05e-722f-45b4-a48e-d5a047517dd2",
                            ContactEmail = "mauris.Integer.sem@et.co.uk",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tincidunt.adipiscing.Mauris@Maecenas.ca",
                            EmailConfirmed = false,
                            FirstName = "Kaden",
                            LastName = "Mcclure",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-415-5106",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bfa7e40-1df8-4a80-8d76-99b6f1b821b5",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5894),
                            UserName = "magna.Praesent.interdum@Curabitursedtortor.ca"
                        },
                        new
                        {
                            Id = "897978AF-644E-40D1-1D47-60E19C08CBDD",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3c8224b-277d-44d0-b6bc-2726bc9eae3b",
                            ContactEmail = "eget@iaculislacuspede.ca",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "libero.Proin.mi@Integer.co.uk",
                            EmailConfirmed = false,
                            FirstName = "Alice",
                            LastName = "Vargas",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-353-5712",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "526cacd0-7357-44fb-a6c1-cb48e94e5b76",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5903),
                            UserName = "porttitor@felisorciadipiscing.co.uk"
                        },
                        new
                        {
                            Id = "339ACF0D-CCCB-C231-298F-CA948C00BCD6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a307fe9-6e14-4ad6-b5bd-7e689e8221e8",
                            ContactEmail = "dui.Cum@Sedcongue.edu",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sapien.cursus@dolor.com",
                            EmailConfirmed = false,
                            FirstName = "Aidan",
                            LastName = "Suarez",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-323-5744",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01fa33d5-6451-479c-a25a-406246f75512",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5916),
                            UserName = "Vivamus@Fusce.ca"
                        },
                        new
                        {
                            Id = "56D6F8FA-A0F5-5EAA-351E-29A7A8DD8627",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d16533d4-490c-4500-950f-be58ddc5f154",
                            ContactEmail = "erat.Vivamus@elementumpurusaccumsan.com",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Donec@Nulla.edu",
                            EmailConfirmed = false,
                            FirstName = "Zachery",
                            LastName = "Powers",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-317-4825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c19bbe1a-2b2f-4aeb-8841-9296f83ce15b",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5924),
                            UserName = "ligula.consectetuer.rhoncus@maurissagittis.com"
                        },
                        new
                        {
                            Id = "267ECF2D-E9E0-EC5A-BA50-0F78C452AEEE",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a0af034-6faf-4496-a525-95cea3798c38",
                            ContactEmail = "consectetuer.adipiscing.elit@facilisis.com",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Curabitur.egestas@etlacinia.net",
                            EmailConfirmed = false,
                            FirstName = "Hunter",
                            LastName = "Simpson",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-415-1510",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33c47454-a560-4c52-b446-8853c890ba98",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5935),
                            UserName = "orci@Aliquam.com"
                        },
                        new
                        {
                            Id = "3344C500-2985-D75D-1E1A-AB1E13F554EF",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6fa86aa-f078-4786-9220-b4f1cfe73235",
                            ContactEmail = "Ut@tellusimperdietnon.org",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ipsum.primis.in@nascetur.net",
                            EmailConfirmed = false,
                            FirstName = "Emerson",
                            LastName = "Cleveland",
                            LockoutEnabled = false,
                            PasswordHash = "Password1",
                            Phone = "1-231-357-6886",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d45d442f-f935-49d1-b07e-91ae50b50376",
                            TwoFactorEnabled = false,
                            UpdatedOn = new DateTime(2021, 3, 11, 21, 19, 59, 127, DateTimeKind.Local).AddTicks(5944),
                            UserName = "tellus@dignissimpharetra.ca"
                        });
                });

            modelBuilder.Entity("Collegiate.Models.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("DriverID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Make")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxSeating")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("VehicleId");

                    b.HasIndex("DriverID");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = "A603CA52-6B09-4C34-B647-0D9B7AF5CFBA",
                            DriverID = "546bded4-592c-4ee1-bc34-601c47049f1b",
                            Make = "Ford",
                            MaxSeating = 3,
                            Model = "Taurus",
                            Year = "2012"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Collegiate.Models.Address", b =>
                {
                    b.HasOne("Collegiate.Models.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Collegiate.Models.Driver", b =>
                {
                    b.HasOne("Collegiate.Models.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("Collegiate.Models.Driver", "UserId");
                });

            modelBuilder.Entity("Collegiate.Models.DriverOffer", b =>
                {
                    b.HasOne("Collegiate.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Collegiate.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("Collegiate.Models.User", "User")
                        .WithMany("DriverOffer")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Collegiate.Models.RiderRequest", b =>
                {
                    b.HasOne("Collegiate.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Collegiate.Models.User", "User")
                        .WithMany("RiderRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Collegiate.Models.Vehicle", b =>
                {
                    b.HasOne("Collegiate.Models.Driver", "Driver")
                        .WithMany("Vehicle")
                        .HasForeignKey("DriverID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Collegiate.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Collegiate.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Collegiate.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Collegiate.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
